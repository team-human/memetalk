{
	"info": {
		"_postman_id": "f94dde13-429f-476d-b92c-e517700643c4",
		"name": "MemeTalk-E2E",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Query popularTags",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "034404fa-6d96-494e-87b9-5048f8280bca",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"pm.test(\"Body is correct\", function () {",
							"    pm.response.to.have.body('{\"data\":{\"popularTags\":[\"humor\",\"software\",\"life\"]}}');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query {\n    popularTags\n}",
						"variables": ""
					}
				},
				"url": {
					"raw": "localhost:8080/graphql",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Query memesByTag",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "1c16a805-0159-4367-8934-31b46409ffe2",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"pm.test(\"Body is correct\", function () {",
							"    const memes = pm.response.json().data.memesByTag;",
							"    pm.expect(memes.length).to.eql(2);",
							"    pm.expect(memes[0].id).to.eql(\"1\");",
							"    pm.expect(memes[0].author).to.eql({id: '1', name: 'Harry Potter'});",
							"    pm.expect(memes[0].tags).to.eql([\"humor\", \"software\"]);",
							"    pm.expect(memes[0].url).to.eql(\"http://localhost:8080/1.png\");",
							"    // The createTime should be a valid date before now.",
							"    pm.expect(new Date(memes[0].createTime).getTime()).to.be.below(new Date().getTime());",
							"    ",
							"    pm.expect(memes[1].id).to.eql(\"2\");",
							"    pm.expect(memes[1].author).to.eql({id: '2', name: 'Hermione Granger'});",
							"    pm.expect(memes[1].tags).to.eql([\"humor\", \"software\"]);",
							"    pm.expect(memes[1].url).to.eql(\"http://localhost:8080/2.png\");",
							"    // The createTime should be a valid date before now.",
							"    pm.expect(new Date(memes[1].createTime).getTime()).to.be.below(new Date().getTime());",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query {\n    memesByTag(tag: \"software\") {\n        id,\n        author { id, name },\n        tags,\n        url,\n        createTime,\n    }\n}",
						"variables": ""
					}
				},
				"url": {
					"raw": "localhost:8080/graphql",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Query loginUser",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "da0dbccf-cc10-4cf5-a4f9-0d12aa1010aa",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"pm.test(\"Body is correct\", function () {",
							"    const user = pm.response.json().data.login.user;",
							"    const token = pm.response.json().data.token;",
							"    pm.expect(user.username).to.eql(\"marry\");",
							"    pm.expect(user.name).to.eql(\"Hermione Granger\");",
							"    pm.expect(user.roles).to.deep.equal([\"USER\"]);",
							"    pm.expect(token).not.equal(null);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation login ($username: String!, $password: String!) {\n    login (username: $username, password: $password) {\n        user {\n            username\n            name\n            roles\n        }\n        token\n    }\n}",
						"variables": "{\n  \"username\": \"marry\",\n  \"password\": \"abcd\"\n}"
					}
				},
				"url": {
					"raw": "localhost:8080/graphql",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		}
	],
	"protocolProfileBehavior": {}
}