{"version":3,"sources":["Enums/FeedbackTypeEnums.ts","View/HashTag/HashTag.tsx","View/HashTag/HashTagList.tsx","View/Button/FeedbackButton.tsx","Query/TopicsQuery.tsx","pages/topic.tsx","pages/profile.tsx","Providers/ApolloClient.tsx","Configs/EnvironmentConfigs.ts","App.tsx","web-build/register-service-worker.js","assets/temp.png"],"names":["FeedbackTypeEnums","HashTag","showPoundSign","text","onPressCallback","View","Text","onPress","Item","item","style","TouchableOpacity","styles","title","HashTagList","hashtagList","onSelectionCallBack","useState","selectedId","setSelectedId","length","SafeAreaView","FlatList","list","horizontal","data","renderItem","borderBottomColor","id","borderBottomWidth","backgroundColor","keyExtractor","extraData","StyleSheet","create","height","flexGrow","padding","fontSize","FeedbackButton","feedbackTypeEnums","feedbackType","count","setCount","feedbackButton","FontAwesome5","Button","name","Like","size","color","margin","display","flexDirection","flex","justifyContent","borderColor","borderWidth","borderRadius","GET_POPULAR_TAGS","gql","GET_MEMES_BY_TAG","testData","userName","userAvatarUrl","postTime","discussTimes","sharedTimes","itemHeader","itemHeaderAvatar","Image","source","uri","width","marginRight","require","resizeMode","tagContainer","tag","Dislike","TopicScreen","navigation","selectedTag","setSelectedTag","useQuery","popularTagsIsLoading","loading","popularTagsData","skip","popularTags","variables","map","useEffect","loadingStyles","container","ActivityIndicator","hashTag","marginTop","StatusBar","currentHeight","marginVertical","marginHorizontal","alignItems","actionContainer","actionButton","shadowColor","textAlign","paddingVertical","DATA","code","ProfileScreen","userData","itemDimension","gridView","fixed","spacing","itemContainer","itemName","itemCode","ListHeaderComponent","marginBottom","marginLeft","fontWeight","apolloClient","ApolloClient","link","HttpLink","fetch","cache","InMemoryCache","NotificationsScreen","TopicStack","createStackNavigator","TopicStackScreen","Navigator","Screen","component","ProfileStack","ProfileStackScreen","NotificationStack","NotificationsStackScreen","Tab","createBottomTabNavigator","App","client","NavigationContainer","navigator","window","addEventListener","serviceWorker","register","scope","then","info","catch","error","console","module","exports"],"mappings":"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","file":"static/js/app.35d9c49c.chunk.js","sourcesContent":["export enum FeedbackTypeEnums {\n  Like,\n  Dislike,\n}\n","import React from 'react'\nimport {\n  View,\n  Text,\n  NativeSyntheticEvent,\n  NativeTouchEvent,\n} from 'react-native'\n\ninterface IHashTagProps {\n  showPoundSign?: boolean\n  onPressCallback?: (ev: NativeSyntheticEvent<NativeTouchEvent>) => void\n  text: string\n}\n\nexport const HashTag = ({\n  showPoundSign,\n  text,\n  onPressCallback = () => {},\n}: IHashTagProps) => {\n  return (\n    <View>\n      <Text onPress={onPressCallback}>{showPoundSign ? `#${text}` : text}</Text>\n    </View>\n  )\n}\n","import React, { useState } from 'react'\nimport {\n  SafeAreaView,\n  Text,\n  FlatList,\n  StatusBar,\n  StyleSheet,\n  TouchableOpacity,\n} from 'react-native'\nimport { HashTag } from './HashTag'\nimport { IHashTag } from '../../Model/IHashTag'\n\ninterface IHashTagListProps {\n  hashtagList: IHashTag[]\n  showPoundSign?: boolean\n  onSelectionCallBack?: (item: IHashTag) => void\n}\n\nconst Item = ({ item, onPress, style, showPoundSign }) => (\n  <TouchableOpacity onPress={onPress} style={[styles.item, style]}>\n    <HashTag style={styles.title} {...item} showPoundSign={showPoundSign} />\n  </TouchableOpacity>\n)\n\nexport const HashTagList = ({\n  hashtagList,\n  showPoundSign,\n  onSelectionCallBack = (item: IHashTag): void => {},\n}) => {\n  const [selectedId, setSelectedId] = useState(null)\n\n  const renderItem = ({ item }: { item: IHashTag }) => {\n    const borderBottomColor = item.id === selectedId ? '#E83468' : '#FFFFFF'\n\n    return (\n      <Item\n        showPoundSign={showPoundSign}\n        item={item}\n        onPress={() => {\n          setSelectedId(item.id)\n          onSelectionCallBack(item)\n        }}\n        style={{\n          borderBottomWidth: 'thick',\n          borderBottomColor,\n          backgroundColor: '#FFFFFF',\n        }}\n      />\n    )\n  }\n\n  return hashtagList?.length === 0 ? (\n    <></>\n  ) : (\n    <SafeAreaView>\n      <FlatList<IHashTag>\n        style={styles.list}\n        horizontal\n        data={hashtagList}\n        renderItem={renderItem}\n        keyExtractor={(item) => item?.id}\n        extraData={selectedId}\n      />\n    </SafeAreaView>\n  )\n}\n\nconst styles = StyleSheet.create({\n  list: {\n    height: 50,\n    flexGrow: 0,\n  },\n  item: {\n    padding: 20,\n  },\n  title: {\n    fontSize: 16,\n  },\n})\n","import React, { useState } from 'react'\nimport { View, Text, StyleSheet } from 'react-native'\nimport { FeedbackTypeEnums } from '../../Enums/FeedbackTypeEnums'\nimport { FontAwesome5 } from '@expo/vector-icons'\n\ninterface IFeedbackButtonProps {\n  feedbackType: FeedbackTypeEnums\n}\n\nexport const FeedbackButton = ({\n  feedbackType: feedbackTypeEnums,\n}: IFeedbackButtonProps) => {\n  const [count, setCount] = useState(0)\n\n  return (\n    <View style={styles.feedbackButton}>\n      <FontAwesome5.Button\n        name={\n          feedbackTypeEnums === FeedbackTypeEnums.Like\n            ? 'thumbs-up'\n            : 'thumbs-down'\n        }\n        backgroundColor=\"#FFFFFF\"\n        onPress={() => setCount(count + 1)}\n        size={24}\n        color=\"black\"\n      ></FontAwesome5.Button>\n      <View style={styles.count}>{count}</View>\n    </View>\n  )\n}\n\nconst styles = StyleSheet.create({\n  feedbackButton: {\n    margin: 10,\n    padding: 10,\n    display: 'flex',\n    flexDirection: 'row',\n    flex: 1,\n    justifyContent: 'space-between',\n    borderColor: '#C4C4C4',\n    borderWidth: 3,\n    borderRadius: 50,\n  },\n  count: {\n    margin: 10,\n  },\n})\n","import { gql } from '@apollo/client'\n\nexport const GET_POPULAR_TAGS = gql`\n  query Popular_Tags {\n    popularTags\n  }\n`\n\nexport const GET_MEMES_BY_TAG = gql`\n  query Memes_By_Tag($tag: String!) {\n    memesByTag(tag: $tag) {\n      id\n      author {\n        id\n        name\n      }\n      tags\n      url\n      createTime\n      counter {\n        likeCount\n        dislikeCount\n      }\n    }\n  }\n`\n","import React, { useEffect, useState } from 'react'\nimport {\n  FlatList,\n  SafeAreaView,\n  StatusBar,\n  StyleSheet,\n  Text,\n  TouchableOpacity,\n  View,\n  Image,\n  ActivityIndicator,\n} from 'react-native'\nimport { HashTagList } from '../View/HashTag/HashTagList'\nimport { FeedbackButton } from '../View/Button/FeedbackButton'\nimport { FeedbackTypeEnums } from '../Enums/FeedbackTypeEnums'\nimport { GET_MEMES_BY_TAG, GET_POPULAR_TAGS } from '../Query/TopicsQuery'\nimport { useQuery } from '@apollo/client'\nimport { IHashTag } from '../Model/IHashTag'\n\n// TODO: will just inject data from api\nconst testData = [\n  {\n    id: 'bd7acbea-c1b1-46c2-aed5-3ad53abb28ba',\n    userName: '使用者十一號',\n    userAvatarUrl: 'https://reactnative.dev/img/tiny_logo.png',\n    postTime: '2020.07.01 22:00',\n    discussTimes: 2,\n    sharedTimes: 1,\n  },\n  {\n    id: '3ac68afc-c605-48d3-a4f8-fbd91aa97f63',\n    userName: '使用者十一號',\n    userAvatarUrl: 'https://reactnative.dev/img/tiny_logo.png',\n    postTime: '2020.07.01 22:00',\n    discussTimes: 2,\n    sharedTimes: 1,\n  },\n  {\n    id: '58694a0f-3da1-471f-bd96-145571e29d72',\n    userName: '使用者十一號',\n    userAvatarUrl: 'https://reactnative.dev/img/tiny_logo.png',\n    postTime: '2020.07.01 22:00',\n    discussTimes: 2,\n    sharedTimes: 1,\n  },\n]\n\nconst Item = ({ item, onPress, style }) => (\n  <TouchableOpacity onPress={onPress} style={[styles.item, style]}>\n    <View style={styles.itemHeader}>\n      <View style={styles.itemHeaderAvatar}>\n        <Image\n          source={{\n            uri: item.userAvatarUrl,\n          }}\n          style={{\n            width: 50,\n            height: 50,\n            borderRadius: 50,\n            marginRight: 8,\n          }}\n        />\n        <Text>{item.userName}</Text>\n      </View>\n      <View>\n        <Text style={{ color: '#9D9D9D' }}>{item.postTime}</Text>\n        <Text style={{ color: '#9D9D9D' }}>\n          {item.discussTimes}個討論 {item.sharedTimes}個分享\n        </Text>\n      </View>\n    </View>\n    <Image\n      source={require('../assets/temp.png')}\n      style={{\n        height: 325,\n        resizeMode: 'cover',\n      }}\n    />\n    <View style={styles.tagContainer}>\n      <Text style={styles.tag}>#李登輝</Text>\n      <Text style={styles.tag}>#韓國瑜</Text>\n      <Text style={styles.tag}>#時事</Text>\n    </View>\n    <View style={styles.feedbackButton}>\n      <FeedbackButton feedbackType={FeedbackTypeEnums.Like} />\n      <FeedbackButton feedbackType={FeedbackTypeEnums.Dislike} />\n    </View>\n  </TouchableOpacity>\n)\n\nexport default function TopicScreen({ navigation }) {\n  const [selectedId, setSelectedId] = useState(null)\n  const [selectedTag, setSelectedTag] = useState('')\n\n  const { loading: popularTagsIsLoading, data: popularTagsData } = useQuery(\n    GET_POPULAR_TAGS\n  )\n\n  const onSelectTag = (hashTag: IHashTag) => {\n    setSelectedTag(hashTag.text)\n  }\n\n  const { loading: memeTagsIsLoading, data: memeTagsData } = useQuery(\n    GET_MEMES_BY_TAG,\n    {\n      skip: !popularTagsData?.popularTags,\n      variables: {\n        tag: selectedTag,\n      },\n    }\n  )\n\n  const hashtagList = popularTagsIsLoading\n    ? []\n    : popularTagsData.popularTags.map((tag: any) => {\n        return {\n          id: tag,\n          text: tag,\n        }\n      })\n\n  useEffect(() => {\n    if (!selectedTag && hashtagList?.length > 0) {\n      setSelectedTag(hashtagList[0].text)\n    }\n  })\n\n  const renderItem = ({ item }) => {\n    const backgroundColor = '#ffffff'\n\n    return (\n      <Item\n        item={item}\n        onPress={() => setSelectedId(item.id)}\n        style={{ backgroundColor }}\n      />\n    )\n  }\n\n  return popularTagsIsLoading ? (\n    <View style={[loadingStyles.container, loadingStyles.horizontal]}>\n      <ActivityIndicator size=\"large\" />\n    </View>\n  ) : (\n    <>\n      <HashTagList\n        hashtagList={hashtagList}\n        showPoundSign={false}\n        onSelectionCallBack={onSelectTag}\n      />\n      <SafeAreaView style={styles.container}>\n        <FlatList\n          data={testData}\n          renderItem={renderItem}\n          keyExtractor={(item) => item.id}\n          extraData={selectedId}\n        />\n      </SafeAreaView>\n    </>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    marginTop: StatusBar.currentHeight || 0,\n  },\n  item: {\n    padding: 20,\n    marginVertical: 1,\n    marginHorizontal: 0,\n    display: 'flex',\n  },\n  itemHeader: {\n    display: 'flex',\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'space-between',\n  },\n  itemHeaderAvatar: {\n    display: 'flex',\n    flexDirection: 'row',\n    alignItems: 'center',\n  },\n  actionContainer: {\n    display: 'flex',\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'space-between',\n  },\n  actionButton: {\n    width: 161,\n    height: 45,\n    backgroundColor: '#FFFFFF',\n    borderRadius: 30,\n    shadowColor: '#00000026',\n  },\n  tagContainer: {\n    display: 'flex',\n    flexDirection: 'row',\n    alignItems: 'center',\n  },\n  tag: {\n    borderRadius: 30,\n    width: 89,\n    backgroundColor: '#C4C4C4',\n    textAlign: 'center',\n    paddingVertical: 8,\n    marginRight: 14,\n  },\n  feedbackButton: {\n    display: 'flex',\n    flex: 1,\n    flexDirection: 'row',\n  },\n})\n\nconst loadingStyles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n  },\n  horizontal: {\n    flexDirection: 'row',\n    justifyContent: 'space-around',\n    padding: 10,\n  },\n})\n","import React, { useState } from 'react'\nimport {\n  SafeAreaView,\n  StatusBar,\n  StyleSheet,\n  Text,\n  View,\n} from 'react-native'\nimport { FlatGrid } from 'react-native-super-grid'\n\nconst DATA = [\n    { name: 'TURQUOISE', code: '#1abc9c' },\n    { name: 'EMERALD', code: '#2ecc71' },\n    { name: 'PETER RIVER', code: '#3498db' },\n    { name: 'AMETHYST', code: '#9b59b6' },\n    { name: 'WET ASPHALT', code: '#34495e' },\n    { name: 'GREEN SEA', code: '#16a085' },\n    { name: 'NEPHRITIS', code: '#27ae60' },\n    { name: 'BELIZE HOLE', code: '#2980b9' },\n    { name: 'WISTERIA', code: '#8e44ad' },\n    { name: 'MIDNIGHT BLUE', code: '#2c3e50' },\n    { name: 'SUN FLOWER', code: '#f1c40f' },\n    { name: 'CARROT', code: '#e67e22' },\n    { name: 'ALIZARIN', code: '#e74c3c' },\n    { name: 'CLOUDS', code: '#ecf0f1' },\n    { name: 'CONCRETE', code: '#95a5a6' },\n    { name: 'ORANGE', code: '#f39c12' },\n    { name: 'PUMPKIN', code: '#d35400' },\n    { name: 'POMEGRANATE', code: '#c0392b' },\n    { name: 'SILVER', code: '#bdc3c7' },\n    { name: 'ASBESTOS', code: '#7f8c8d' },\n    { name: 'TURQUOISE', code: '#1abc9c' },\n    { name: 'EMERALD', code: '#2ecc71' },\n    { name: 'PETER RIVER', code: '#3498db' },\n    { name: 'AMETHYST', code: '#9b59b6' },\n    { name: 'WET ASPHALT', code: '#34495e' },\n    { name: 'GREEN SEA', code: '#16a085' },\n    { name: 'NEPHRITIS', code: '#27ae60' },\n    { name: 'BELIZE HOLE', code: '#2980b9' },\n    { name: 'WISTERIA', code: '#8e44ad' },\n    { name: 'MIDNIGHT BLUE', code: '#2c3e50' },\n    { name: 'SUN FLOWER', code: '#f1c40f' },\n    { name: 'CARROT', code: '#e67e22' },\n    { name: 'ALIZARIN', code: '#e74c3c' },\n    { name: 'CLOUDS', code: '#ecf0f1' },\n    { name: 'CONCRETE', code: '#95a5a6' },\n    { name: 'ORANGE', code: '#f39c12' },\n    { name: 'PUMPKIN', code: '#d35400' },\n    { name: 'POMEGRANATE', code: '#c0392b' },\n    { name: 'SILVER', code: '#bdc3c7' },\n    { name: 'ASBESTOS', code: '#7f8c8d' },\n]\n\n\nexport default function ProfileScreen({ navigation }) {\n  const [selectedId, setSelectedId] = useState(null)\n  const userData = {\n      isTopInDay: true,\n      date: '2020/07/14',\n      like: 1300,\n      unLike: 100,\n      name: 'A'\n  }\n\n  return (\n    <>\n      <SafeAreaView style={styles.container}>\n        <FlatGrid\n            itemDimension={100}\n            data={DATA}\n            style={styles.gridView}\n            fixed\n            spacing={16}\n            renderItem={({ item }) => (\n                <View style={[styles.itemContainer, { backgroundColor: item.code }]}>\n                    <Text style={styles.itemName}>{item.name}</Text>\n                    <Text style={styles.itemCode}>{item.code}</Text>\n                </View>\n            )}\n            ListHeaderComponent={() => {\n                return (\n                    <View style={{ display: \"flex\", flexDirection: \"row\", justifyContent: \"center\", alignItems: \"center\", marginBottom: 24}}>\n                        <View style={{ \n                                backgroundColor: 'rgba(196, 196, 196, 0.8)', borderRadius: 32, height:64, width: 64,\n                                display: \"flex\", justifyContent: \"center\", alignItems: \"center\"\n                            }}>\n                            <Text>{userData.name}</Text>\n                        </View>\n                        <View style={{ marginLeft: 8}}>\n                            {\n                                userData.isTopInDay ? <Text>榮登 {userData.date } 題王</Text> : null\n                            }\n                            <Text>總獲得喜歡 {userData.like} 討厭 {userData.unLike}</Text>\n                        </View>\n                    </View>\n                )\n            }}\n        />\n      </SafeAreaView>\n    </>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    marginTop: StatusBar.currentHeight || 0,\n    backgroundColor: '#ffffff'\n  },\n  gridView: {\n    marginTop: 10,\n    flex: 1,\n  },\n  itemContainer: {\n    justifyContent: 'flex-end',\n    borderRadius: 5,\n    padding: 10,\n    height: 100,\n  },\n  itemName: {\n    fontSize: 16,\n    color: '#fff',\n    fontWeight: '600',\n  },\n  itemCode: {\n    fontWeight: '600',\n    fontSize: 12,\n    color: '#fff',\n  },\n})\n","import fetch from 'cross-fetch';\nimport { ApolloClient, HttpLink, InMemoryCache } from '@apollo/client'\nimport { EnvironmentConfigs } from '../Configs/EnvironmentConfigs'\n\nexport const apolloClient = new ApolloClient({\n  link: new HttpLink({ uri: EnvironmentConfigs.dev.graphQLEndPoint, fetch }),\n  cache: new InMemoryCache(),\n})\n","export const EnvironmentConfigs = {\n    dev: {\n        graphQLEndPoint: \"https://memetalk.herokuapp.com/graphql\" \n    }\n}","import * as React from 'react'\nimport { Text, View } from 'react-native'\nimport { NavigationContainer } from '@react-navigation/native'\nimport { createStackNavigator } from '@react-navigation/stack'\nimport { createBottomTabNavigator } from '@react-navigation/bottom-tabs'\nimport TopicScreen from './pages/topic'\nimport ProfileScreen from './pages/profile'\nimport { apolloClient } from './Providers/ApolloClient'\nimport { ApolloProvider } from '@apollo/client'\n\nfunction NotificationsScreen({ navigation }) {\n  return (\n    <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>\n      <Text>Notification screen</Text>\n    </View>\n  )\n}\n\nconst TopicStack = createStackNavigator()\n\nfunction TopicStackScreen() {\n  return (\n    <TopicStack.Navigator>\n      <TopicStack.Screen name=\"Topic\" component={TopicScreen} />\n    </TopicStack.Navigator>\n  )\n}\n\nconst ProfileStack = createStackNavigator()\n\nfunction ProfileStackScreen() {\n  return (\n    <ProfileStack.Navigator>\n      <ProfileStack.Screen name=\"Profile\" component={ProfileScreen} />\n    </ProfileStack.Navigator>\n  )\n}\n\nconst NotificationStack = createStackNavigator()\n\nfunction NotificationsStackScreen() {\n  return (\n    <NotificationStack.Navigator>\n      <NotificationStack.Screen\n        name=\"Notifications\"\n        component={NotificationsScreen}\n      />\n    </NotificationStack.Navigator>\n  )\n}\n\nconst Tab = createBottomTabNavigator()\n\nexport default function App() {\n  return (\n    <ApolloProvider client={apolloClient}>\n      <NavigationContainer>\n        <Tab.Navigator>\n          <Tab.Screen name=\"Topic\" component={TopicStackScreen} />\n          <Tab.Screen name=\"Profile\" component={ProfileStackScreen} />\n          <Tab.Screen\n            name=\"Notification\"\n            component={NotificationsStackScreen}\n          />\n        </Tab.Navigator>\n      </NavigationContainer>\n    </ApolloProvider>\n  )\n}\n","/* eslint-env browser */\n\nif ('serviceWorker' in navigator) {\n  window.addEventListener('load', function () {\n    navigator.serviceWorker\n      .register('/memetalk/expo-service-worker.js', { scope: '/memetalk/' })\n      .then(function (info) {\n        // console.info('Registered service-worker', info);\n      })\n      .catch(function (error) {\n        console.info('Failed to register service-worker', error);\n      });\n  });\n}\n","module.exports = __webpack_public_path__ + \"static/media/temp.c424179f.png\";"],"sourceRoot":""}